// Generated by Kruto.js
// DO NOT EDIT THIS FILE DIRECTLY
// Instead, edit 'stdlib.js', and run 'premake4 stdlib'
#ifndef KRSTDLIB_HPP
#define KRSTDLIB_HPP

namespace kruto {

const char *STDLIB ="//\n"
"// Kruto.js Standard Library\n"
"//\n"
"// EDIT THIS FILE and run 'premake4 stdlib'\n"
"//\n"
"// For more information please consult the documentation.\n"
"//\n"
"window = this;\n"
"\n"
"(function(window)\n"
"{\n"
"  window.console = { log: kruto.log };\n"
"  window.alert = kruto.log;\n"
"  window.require = kruto.require;\n"
"  window.read = kruto.read;\n"
"  window.close = kruto.quit;\n"
"\n"
"  window.__defineGetter__(\"title\", function() { return kruto.title; });\n"
"  window.__defineSetter__(\"title\", function(title) { kruto.title = title; });\n"
"\n"
"  window.navigator = {};\n"
"  window.navigator.__defineGetter__(\"userAgent\", function() { return kruto.version });\n"
"  window.navigator.__defineGetter__(\"appVersion\", function() { return kruto.version });\n"
"\n"
"  function _urlFromArgs(url, args)\n"
"  {\n"
"    var params = [];\n"
"    for(var i=0; i<args.length; i++)\n"
"    {\n"
"      var arg = args[i];\n"
"      if(arg.indexOf(\"=\") != -1)\n"
"         params.push(arg.replace(/^(-+)/, \"\"));\n"
"    }\n"
"\n"
"    if(params.length > 0)\n"
"      return url + \"?\" + params.join(\"&\");\n"
"    else\n"
"      return url;\n"
"  }\n"
"\n"
"  var _url = _urlFromArgs(\"http://\" + kruto.name.toLowerCase() +\"/\", kruto.arguments);\n"
"  console.log(_url);\n"
"\n"
"  window.location = {};\n"
"  window.location.__defineGetter__(\"href\", function() { return _url; });\n"
"\n"
"  window.setInterval = function(callback, interval) \n"
"  {\n"
"    return kruto.timer.add(callback, interval, true);\n"
"  };\n"
"  window.clearInterval = function(intervalId)\n"
"  {\n"
"    return kruto.timer.remove(intervalId);\n"
"  };\n"
"  window.setTimeout = function(callback, timeout) \n"
"  { \n"
"    return kruto.timer.add(callback, timeout, false);\n"
"  };\n"
"  window.clearTimeout = function(timeoutId)\n"
"  {\n"
"    return kruto.timer.remove(intervalId);\n"
"  };\n"
"  window.requestAnimationFrame = function(callback) { return setTimeout(callback, 1000 / 60); };\n"
"\n"
"  function Event(type)\n"
"  {\n"
"    this.type = type;\n"
"  }\n"
"  Event.prototype = { type: null };\n"
"  Event.prototype.toString = function() { return \"Event \" + JSON.stringify(this); };\n"
"\n"
"  function KeyboardEvent(type, name, key, alt, shift, ctrl)\n"
"  {\n"
"    this.type = type;\n"
"    this.keyIdentifier = name;\n"
"    this.keyCode = key;\n"
"    this.altKey = alt;\n"
"    this.shiftKey = shift;\n"
"    this.ctrlKey = ctrl;\n"
"  }\n"
"  KeyboardEvent.prototype = { type: null, keyIdentifier: \"\", keyCode: 0, altKey: false, shiftKey: false, ctrlKey: false };\n"
"  KeyboardEvent.prototype.toString = function() { return \"KeyboardEvent \" + JSON.stringify(this); };\n"
"\n"
"  function MouseEvent(type, button, x, y)\n"
"  {\n"
"    this.type = type;\n"
"    this.which = button;\n"
"    this.button = button > 0 ? button - 1 : 0;\n"
"    this.offsetX = x;\n"
"    this.clientX = x;\n"
"    this.offsetY = y;\n"
"    this.clientY = y;\n"
"  }\n"
"  MouseEvent.prototype = { type: null, which: 0, button: 0, offsetX: 0, clientX: 0, offsetY: 0, clientY: 0 };\n"
"  MouseEvent.prototype.toString = function() { return \"MouseEvent \" + JSON.stringify(this); };\n"
"\n"
"  var _eventListeners = \n"
"  {\n"
"    load: [],\n"
"    keydown: [],\n"
"    keyup: [],\n"
"    mousedown: [],\n"
"    mouseup: [],\n"
"    mousemove: [],\n"
"    oncontextmenu: []\n"
"  };\n"
"  var _callEventListeners = function(type, e)\n"
"  {\n"
"    if(typeof window[\"on\" + type] == \"function\")\n"
"      window[\"on\" + type].call(this, e);\n"
"\n"
"    if(typeof _eventListeners[type] == \"undefined\" || _eventListeners[type] == null)\n"
"      return;\n"
"\n"
"    for(var i=0; i<_eventListeners[type].length; i++)\n"
"    {\n"
"      if(typeof _eventListeners[type][i] == \"function\")\n"
"        _eventListeners[type][i].call(this, e); \n"
"    }\n"
"  };\n"
"  window.addEventListener = function(type, callback)\n"
"  {\n"
"    if(typeof _eventListeners[type] == \"undefined\" || _eventListeners[type] == null)\n"
"      _eventListeners[type] = [];\n"
"\n"
"    _eventListeners[type].push(callback);\n"
"  };\n"
"  window.removeEventListener = function(type, callback)\n"
"  {\n"
"    if(typeof _eventListeners[type] == \"undefined\" || _eventListeners[type] == null)\n"
"      return;\n"
"\n"
"    _eventListeners[type].splice(_eventListeners[type].indexOf(callback), 1);\n"
"  };\n"
"\n"
"  kruto.main = function(argv)\n"
"  {\n"
"    _callEventListeners(\"load\", new Event(\"load\"));\n"
"  };\n"
"  kruto.keydown = function(name, key, alt, shift, ctrl)\n"
"  {\n"
"    _callEventListeners(\"keydown\", new KeyboardEvent(\"keydown\", name, key, alt, shift, ctrl));\n"
"  };\n"
"  kruto.keyup = function(name, key, alt, shift, ctrl)\n"
"  {\n"
"    _callEventListeners(\"keyup\", new KeyboardEvent(\"keyup\", name, key, alt, shift, ctrl));\n"
"  };\n"
"  kruto.mousedown = function(button, x, y)\n"
"  {\n"
"    if(button == 2)\n"
"      _callEventListeners(\"contextmenu\", new MouseEvent(\"contextmenu\", button, x, y));\n"
"\n"
"    _callEventListeners(\"mousedown\", new MouseEvent(\"mousedown\", button, x, y));\n"
"  };\n"
"  kruto.mouseup = function(button, x, y)\n"
"  {\n"
"    _callEventListeners(\"mouseup\", new MouseEvent(\"mouseup\", button, x, y));\n"
"  };\n"
"  kruto.mousemove = function(button, x, y)\n"
"  {\n"
"    _callEventListeners(\"mousemove\", new MouseEvent(\"mousemove\", button, x, y));\n"
"  };\n"
"\n"
"  function HTMLElementList()\n"
"  {\n"
"    var _length = 0;\n"
"    this.append = function(element) { this[_length++] = element; return element; }\n"
"    this.__defineGetter__(\"length\", function() { return _length; });\n"
"  }\n"
"\n"
"  function HTMLElement(type, id)\n"
"  {\n"
"    this.type = type || 'div';\n"
"    this.id = id || null;\n"
"    this.childNodes = new HTMLElementList();\n"
"  }\n"
"  HTMLElement.prototype = \n"
"  { \n"
"    id: null,\n"
"    type: 'div',\n"
"    childNodes: null,\n"
"    appendChild: function(element) { return this.childNodes.append(element); },\n"
"    requestFullscreen: function() { /* empty */ },\n"
"    isFullscreen: function() { /* empty */ },\n"
"    style: {}\n"
"  };\n"
"  HTMLElement.prototype.toString = function() { return \"HTMLElement \" + JSON.stringify(this); };\n"
"\n"
"  window.Image = kruto.image;\n"
"  window.Image.prototype.__defineGetter__(\"src\", function()\n"
"  {\n"
"    return this.filename;\n"
"  });\n"
"  window.Image.prototype.__defineSetter__(\"src\", function(value)\n"
"  {\n"
"      this.filename = value.split(\"?\")[0];\n"
"\n"
"      var _self = this;\n"
"      setTimeout(function()\n"
"      {\n"
"        if(_self.load())\n"
"          _self.onload();\n"
"        else\n"
"          _self.onerror(); \n"
"      }, 100);\n"
"  });\n"
"  window.Image.prototype.addEventListener = function(type, callback)\n"
"  {\n"
"    this[\"on\" + type] = callback;\n"
"  };\n"
"\n"
"  window.Audio = kruto.audio || function()\n"
"  {\n"
"    this.canPlayType = function() { return false; };\n"
"    this.play = function() { /* empty */ };\n"
"    this.pause = function() { /* empty */  };\n"
"    this.load = function() { return false; };\n"
"    this.onload = function() { /* empty */ };\n"
"    this.onerror = function() { /* empty */ };\n"
"    this.onloadedmetadata = function() { /* empty */ };\n"
"    this.oncanplaythrough = function() { /* empty */ };\n"
"  };\n"
"  window.Audio.prototype.__defineGetter__(\"src\", function()\n"
"  {\n"
"    return this.filename;\n"
"  });\n"
"  window.Audio.prototype.__defineSetter__(\"src\", function(value)\n"
"  {\n"
"      this.filename = value.split(\"?\")[0];\n"
"\n"
"      var _self = this;\n"
"      setTimeout(function()\n"
"      {\n"
"        if(_self.load())\n"
"        {\n"
"          _self.onloadedmetadata();\n"
"          _self.oncanplaythrough();\n"
"          _self.onload();\n"
"        }\n"
"        else\n"
"        {\n"
"          _self.onerror();  \n"
"        }\n"
"      }, 200);\n"
"  });\n"
"  window.Audio.prototype.addEventListener = function(type, callback)\n"
"  {\n"
"    this[\"on\" + type] = callback;\n"
"  };\n"
"\n"
"  function Context(canvas)\n"
"  {\n"
"    this.canvas = canvas;\n"
"    this._path = [];\n"
"  }\n"
"  Context.prototype = \n"
"  {\n"
"    save: kruto.canvas.save,\n"
"    restore: kruto.canvas.restore,\n"
"    scale: kruto.canvas.scale,\n"
"    rotate: kruto.canvas.rotate,\n"
"    translate: kruto.canvas.translate,\n"
"    transform: kruto.canvas.transform,\n"
"    setTransform: kruto.canvas.setTransform,\n"
"    fillRect: kruto.canvas.fillRect,\n"
"    strokeRect: kruto.canvas.strokeRect,\n"
"    clearRect: kruto.canvas.clearRect,\n"
"    drawImage: kruto.canvas.drawImage,\n"
"    beginPath: function()\n"
"    {\n"
"      this._path = [];\n"
"    },\n"
"    closePath: function()\n"
"    {\n"
"      // empty\n"
"    },\n"
"    arc: function()\n"
"    {\n"
"      // TODO\n"
"    },\n"
"    moveTo: function()\n"
"    {\n"
"      this._path.push(arguments);\n"
"    },\n"
"    lineTo: function()\n"
"    {\n"
"      this._path.push(arguments);\n"
"    },\n"
"    stroke: function()\n"
"    {\n"
"      if(this._strokeStyle)\n"
"        kruto.canvas.strokeStyle = this._strokeStyle;\n"
"\n"
"      kruto.canvas.beginPolygon(false);\n"
"      for(var i=0; i<this._path.length; i++)\n"
"      {\n"
"        var p = this._path[i];\n"
"        kruto.canvas.drawPoint(p[0], p[1]);\n"
"      }\n"
"      kruto.canvas.endPolygon();\n"
"    },\n"
"    fill: function()\n"
"    {\n"
"      if(this._fillStyle)\n"
"        kruto.canvas.fillStyle = this._fillStyle;\n"
"\n"
"      kruto.canvas.beginPolygon(true);\n"
"      for(var i=0; i<this._path.length; i++)\n"
"      {\n"
"        var p = this._path[i];\n"
"        kruto.canvas.drawPoint(p[0], p[1]);\n"
"      }\n"
"      kruto.canvas.endPolygon();\n"
"    },\n"
"    get strokeStyle()\n"
"    {\n"
"      return this._strokeStyle;\n"
"    },\n"
"    set strokeStyle(value)\n"
"    {\n"
"      kruto.canvas.strokeStyle = value;\n"
"      this._strokeStyle = value;\n"
"    },\n"
"    get fillStyle()\n"
"    {\n"
"      return this._fillStyle;\n"
"    },\n"
"    set fillStyle(value)\n"
"    {\n"
"      kruto.canvas.fillStyle = value;\n"
"      this._fillStyle = value;\n"
"    },\n"
"    get lineWidth()\n"
"    {\n"
"      return this._lineWidth;  \n"
"    },\n"
"    set lineWidth(value)\n"
"    {\n"
"      kruto.canvas.lineWidth = value;\n"
"      this._lineWidth = value;\n"
"    }\n"
"  };\n"
"\n"
"  var _fullscreen = null;\n"
"\n"
"  function Canvas()\n"
"  {\n"
"    var _width = 800;\n"
"    var _height = 600;\n"
"    var _context = null;\n"
"    var _color = \"#FFFFFF\";\n"
"    \n"
"    this.style = {};\n"
"    this.style.__defineGetter__(\"backgroundColor\", function()\n"
"    {\n"
"      return _color;\n"
"    });\n"
"    this.style.__defineSetter__(\"backgroundColor\", function(value)\n"
"    {\n"
"      _color = value;\n"
"      kruto.canvas.setClearColor(value);\n"
"    });\n"
"\n"
"    this.getContext = function(type) \n"
"    {\n"
"      if(_context == null)\n"
"      {\n"
"        if(kruto.canvas.setVideoMode(_width, _height, false, _color))\n"
"          _context = new Context(this);\n"
"        else\n"
"          kruto.quit();\n"
"      }\n"
"      return _context; \n"
"    };\n"
"    this.requestFullscreen = function()\n"
"    {\n"
"        _fullscreen = (_fullscreen == null && \n"
"                       _context != null && \n"
"                       kruto.canvas.setVideoMode(_width, _height, true, _color)) ? this : null;\n"
"    };\n"
"    this.isFullscreen = function()\n"
"    {\n"
"        return _fullscreen != null;\n"
"    };\n"
"\n"
"    this.__defineGetter__(\"width\", function() { return _width; });\n"
"    this.__defineSetter__(\"width\", function(value) { _width = value; });\n"
"\n"
"    this.__defineGetter__(\"height\", function() { return _height; });\n"
"    this.__defineSetter__(\"height\", function(value) { _height = value; });\n"
"\n"
"    this.__defineGetter__(\"onmousedown\", function() { return window[\"onmousedown\"]; });\n"
"    this.__defineSetter__(\"onmousedown\", function(value) { window[\"onmousedown\"] = value; });\n"
"\n"
"    this.__defineGetter__(\"onmouseup\", function() { return window[\"onmouseup\"]; });\n"
"    this.__defineSetter__(\"onmouseup\", function(value) { window[\"onmouseup\"] = value; });\n"
"\n"
"    this.__defineGetter__(\"onmousemove\", function() { return window[\"onmousemove\"]; });\n"
"    this.__defineSetter__(\"onmousemove\", function(value) { window[\"onmousemove\"] = value; });\n"
"\n"
"    this.__defineGetter__(\"oncontextmenu\", function() { return window[\"oncontextmenu\"]; });\n"
"    this.__defineSetter__(\"oncontextmenu\", function(value) { window[\"oncontextmenu\"] = value; });\n"
"  }\n"
"  Canvas.prototype.toString = function() { return \"Canvas \" + JSON.stringify(this); };\n"
"\n"
"  window.__defineGetter__(\"innerWidth\", function() { return kruto.width; });\n"
"  window.__defineGetter__(\"innerHeight\", function() { return kruto.height; });\n"
"\n"
"  window.document = {};\n"
"  window.document.addEventListener = window.addEventListener;\n"
"  window.document.removeEventListener = window.removeEventListener;\n"
"  window.document.exitFullscreen = function()\n"
"  {\n"
"    _fullscreen = (_fullscreen != null && \n"
"                   kruto.canvas.setVideoMode(_fullscreen.width, _fullscreen.height, false)) ? null : _fullscreen;\n"
"  };\n"
"  window.document.createElement = function(type)\n"
"  {\n"
"    switch(type)\n"
"    {\n"
"      case \"canvas\":\n"
"        return new Canvas();\n"
"\n"
"      case \"image\":\n"
"        return new Image();\n"
"\n"
"      case \"audio\":\n"
"        return new Audio();\n"
"    }\n"
"\n"
"    return new HTMLElement(type);\n"
"  };\n"
"  window.document.createTextNode = function(data)\n"
"  {\n"
"    return null; \n"
"  };\n"
"  window.document.canvas = new Canvas();\n"
"  window.document.getElementById = function(id)\n"
"  {\n"
"    switch(id)\n"
"    {\n"
"      case \"canvas\":\n"
"        return window.document.canvas;\n"
"    }\n"
"\n"
"    return null;\n"
"  };\n"
"  window.document.getElementsByTagName = function() { return []; };\n"
"  window.document.head = new HTMLElement('head');\n"
"  window.document.body = new HTMLElement('body');\n"
"\n"
"})(window);\n"
;

}

#endif