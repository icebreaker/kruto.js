{"google":"UA-3042007-2","name":"Kruto.js","body":"Kruto.js\r\n========\r\nKruto.js is an HTML5 *sandbox* inspired by [Ejecta](https://github.com/phoboslab/Ejecta).\r\n\r\n> Transform your HTML5 games/apps into first class citizens of the desktop.\r\n\r\nPlease *note* that only a small subset of features is implemented.\r\n\r\nYou should consider it *alpha quality*; take everything with a grain of salt and \r\npepper for that matter.\r\n\r\n> No shaders were harmed in the making of Kruto.js.\r\n\r\nGetting Started\r\n---------------\r\nIn order to get started you need to clone this repository and fetch the\r\nbundled submodules by opening up a Terminal window and issuing the following\r\ncommands.\r\n\r\n```bash\r\ngit clone git://github.com/icebreaker/kruto.js.git\r\ncd kruto.js\r\ngit submodule init\r\ngit submodule update\r\n```\r\n\r\nBefore you start make sure that you installed all the required dependencies.\r\n\r\n**Note**: Windows and Mac OSX users you are on your for now, but everything\r\n**should** work just fine without *any* changes.\r\n\r\n#### Requirements\r\n* [premake4](http://industriousone.com/premake)\r\n* [SDL 1.2](http://www.libsdl.org/)\r\n* [SDL Image 1.2](http://www.libsdl.org/projects/SDL_image/)\r\n* [SDL Mixer 1.2](http://www.libsdl.org/projects/SDL_mixer/)\r\n* [V8](https://developers.google.com/v8/)\r\n\r\n##### Premake\r\nDownload premake from [industriousone.com](http://industriousone.com/premake/download) \r\nand copy it to a location in your `PATH`.\r\n\r\n```bash\r\nsudo cp premake4 /usr/bin\r\n```\r\n\r\n##### SDL\r\nYou can install SDL from *source* or via your GNU/Linux distribution's favorite\r\npackage manager. Odds are you already have it installed.\r\n\r\nFedora\r\n\r\n```bash\r\nsudo yum install SDL-devel SDL_image-devel SDL_mixer-devel SDL_ttf-devel\r\n```\r\n\r\nDebian\r\n\r\n```bash\r\nsudo apt-get install libsdl1.2-dev libsdl-image1.2-dev libsdl-mixer1.2-dev\r\n```\r\n\r\nopenSUSE\r\n\r\n```bash\r\nsudo zypper install libSDL-devel libSDL_image-devel libSDL_mixer-devel\r\n```\r\n\r\n##### V8\r\nV8 is bundled as a `git submodule` and you can compile it by issuing the\r\nfollowing commands in the `kruto.js` directory.\r\n\r\n```bash\r\ncd extern/v8\r\nmake dependencies\r\nmake native\r\n```\r\n\r\n#### Build\r\nNow that you have all the dependencies run the following commands in the\r\n`kruto.js` directory.\r\n\r\n```bash\r\npremake4 gmake\r\nmake config=release\r\n```\r\n\r\nIf all goes well and the birds sing in your yard there should be an executable called \r\n`kruto.js` in the `build` directory.\r\n\r\nBasic Example\r\n-------------\r\n![](https://raw.github.com/icebreaker/kruto.js/master/screenshots/basic.png)\r\n\r\n```bash\r\ncd demos/basic\r\n../../build/kruto.js\r\n```\r\n\r\nAdvanced Example\r\n----------------\r\n![](https://raw.github.com/icebreaker/kruto.js/master/screenshots/paperballoon.png)\r\n\r\n```bash\r\ncd demos/paperballoon\r\n../../build/kruto.js src/paperballoon.js\r\n```\r\n\r\nPlay it online [here](http://szabster.net/paperballoon).\r\n\r\nThat's all. Enjoy :)\r\n\r\nAvailable API\r\n-------------\r\nKruto.js implements **only** a small subset of HTML5 meaning that there's\r\n**no real DOM, CSS, WebGL or other exotic stuff.**.\r\n\r\n#### console\r\n* log(message, ...)\r\n\r\n#### Canvas\r\n* save()\r\n* restore()\r\n* scale(x, y)\r\n* rotate(angle)\r\n* translate(x, y)\r\n* transform(m11, m12, m21, m22, dx, dy)\r\n* setTransform(m11, m12, m21, m22, dx, dy)\r\n* width (property)\r\n* height (property)\r\n* drawImage(image, dx, dy)\r\n* drawImage(image, dx, dy, dw, dh)\r\n* drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)\r\n* clearRect(x, y, w, h)\r\n* fillRect(x, y, w, h)\r\n* strokeRect(x, y, w, h)\r\n* beginPath()\r\n* closePath()\r\n* moveTo(x, y)\r\n* lineTo(x, y)\r\n* fill()\r\n* stroke()\r\n* strokeStyle (property)\r\n* fillStyle (property)\r\n* lineWidth (property)\r\n* requestFullscreen()\r\n* isFullscreen()\r\n\r\n#### Image\r\n* src (property)\r\n* width (read-only property)\r\n* height (read-only property)\r\n* load (event)\r\n* error (event)\r\n\r\n```javascript\r\nvar image = new Image();\r\nimage.onload = function() \r\n{\r\n  ctx.drawImage(image, 100, 100);\r\n};\r\nimage.src = 'panda.png';\r\n```\r\n\r\n#### Audio\r\n* play()\r\n* pause()\r\n* canPlayType(type) (supports `audio/wav` and `audio/ogg`)\r\n* volume (property) (supports `0.0f` to `1.0f`)\r\n* error(event)\r\n* canplaythrough(event)\r\n* loop (property)\r\n* src (property)\r\n\r\n```javascript\r\nvar audio = new Audio();\r\naudio.canplaythrough = function()\r\n{\r\n  audio.play();\r\n};\r\naudio.src = 'panda.ogg';\r\n```\r\n\r\n#### document\r\n* title (property)\r\n* createElement(tagName)\r\n* getElementById(id)\r\n* keydown (event)\r\n* keyup (event)\r\n* mousedown (event)\r\n* mouseup (event)\r\n* mousemove (event)\r\n\r\n#### navigator\r\n* userAgent (read-only property) returns `Kruto.js/1.0.1337 Chrome/24.0.1305.3`\r\n* appVersion (read-only property) returns `Kruto.js/1.0.1337 Chrome/24.0.1305.3`\r\n\r\n#### window\r\n* innerWidth (read-only property)\r\n* innerHeight (read-only property)\r\n* setTimeout(callback, timeout)\r\n* clearTimeout(timeoutId)\r\n* setInterval(callback, interval)\r\n* clearInterval(intervalId)\r\n* requestAnimationFrame(callback)\r\n* exitFullscreen()\r\n\r\n#### location\r\n* href (read-only property) returns `http://kruto.js/?carg1=carg2&carg3=carg4`\r\n\r\n#### this\r\n* require(file)\r\n\r\n```javascript\r\n// loads a script file synchronously (blocking)\r\nrequire('js/game.js')\r\n```\r\n\r\nExtending the API\r\n-----------------\r\nThere are two possible ways to extend `kruto.js` as outlined below.\r\n\r\n#### Native Code - C++\r\nNew *features* can be added by implementing and compiling them into the\r\n`kruto.js` binary. More often than not this will also require adding some\r\n*glue* or *syntactic sugar* into the `Standard Library`.\r\n\r\nFor instance TTF font support could be added by using the `SDL_ttf` library in\r\na similar fashion to the existing `Image` and `Audio` support.\r\n\r\nAll native *methods* must be exposed as part of the *kruto* namespace/object.\r\n\r\n#### Standard Library Code - JS\r\nHowever, some features are `easier` to emulate from JS and that's where the\r\n*Standard Library* comes into play.\r\n\r\nThe Standard Library resides in `src/kruto/sandbox/stdlib.js`, it is\r\ncompiled into the `kruto.js` executable and used to bootstrap the environment\r\nbefore loading `main.js`.\r\n\r\n`kruto.js` has to be recompiled in order to pick up the changes by running \r\nthe following commands.\r\n\r\n```bash\r\npremake4 stdlib\r\nmake\r\n```\r\n\r\nIf there's a local copy of `stdlib.js` in the same directory with `main.js` it\r\nwill take precedence and will be loaded instead of the embedded one.\r\n\r\nThis behavior can be used while testing without recompiling `kruto.js` after\r\neach change to `stdlib.js`.\r\n\r\nFeel free to take a sneak peek into `src/kruto/sandbox/stdlib.js` in order to\r\nmake an idea about what is available at this point.\r\n\r\nNotes\r\n-----\r\nThere are a couple of important things to consider when building with `kruto.js` \r\nin mind.\r\n\r\n* You **must** set the `width` and `height` of the canvas before calling `getContext`\r\n\r\n```javascript\r\nvar canvas = document.getElementById(\"canvas\");\r\n\r\n// setting `width` and `height` before\r\ncanvas.width = 1280;\r\ncanvas.height = 720;\r\n\r\nvar ctx = canvas.getContext(\"2d\");\r\n```\r\n\r\n* You **can** set `style.backgroundColor` to change the `clear color` (background) of \r\nthe canvas\r\n\r\n```javascript\r\nvar canvas = document.getElementById(\"canvas\");\r\ncanvas.style.backgroundColor = \"#CACACA\";\r\n```\r\n\r\n#### Command Line\r\n\r\n```bash\r\nkruto.js [main.js] [--key=value --key=value]\r\n```\r\n\r\nBy default `kruto.js` will look in the current directory for the `main.js`\r\nfile, if not found it will terminate immediately.\r\n\r\nIt is possible to specify an alternate file to be executed by providing its\r\nname as the first argument when running `kruto.js`. \r\n\r\nPlease **note** that this file must be *relative* to the current directory.\r\n\r\nContribute\r\n----------\r\n* Fork the project.\r\n* Make your feature addition or bug fix.\r\n* Do **not** bump the version number.\r\n* Send me a pull request. Bonus points for topic branches.\r\n\r\nLicense\r\n-------\r\nCopyright (c) 2012, Mihail Szabolcs\r\n\r\nKruto.js is provided **as-is** under the **MIT** license. For more information see\r\nLICENSE.\r\n","tagline":"HTML5 Sandbox","note":"Don't delete this file! It's used internally to help with page regeneration."}